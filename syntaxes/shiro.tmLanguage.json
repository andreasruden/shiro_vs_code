{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Shiro",
  "scopeName": "source.shiro",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#constants" },
    { "include": "#function-definition" },
    { "include": "#variable-declaration" },
    { "include": "#numbers" },
    { "include": "#operators" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.shiro",
          "match": "//.*$"
        },
        {
          "name": "comment.block.shiro",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.shiro",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.shiro",
          "match": "\\\\."
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.shiro",
          "match": "\\b(if|else|while|for|break|continue|return)\\b"
        },
        {
          "name": "keyword.other.shiro",
          "match": "\\b(fn|var|class|view|self)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.shiro",
          "match": "\\b(bool|void|f32|f64|i8|i16|i32|i64|isize|u8|u16|u32|u64|usize)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.shiro",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.shiro",
          "match": "\\b(null|uninit)\\b"
        }
      ]
    },
    "function-definition": {
      "patterns": [
        {
          "match": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "keyword.other.shiro" },
            "2": { "name": "entity.name.function.shiro" }
          }
        }
      ]
    },
    "variable-declaration": {
      "patterns": [
        {
          "match": "\\b(var)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "keyword.other.shiro" },
            "2": { "name": "variable.other.declaration.shiro" }
          }
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "\\b([0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9][0-9_]*)?)(f32|f64)?\\b",
          "captures": {
            "1": { "name": "constant.numeric.float.shiro" },
            "3": { "name": "storage.type.numeric.suffix.shiro" }
          }
        },
        {
          "match": "\\b(0[xX][0-9a-fA-F][0-9a-fA-F_]*)(i8|i16|i32|i64|isize|u8|u16|u32|u64|usize)?\\b",
          "captures": {
            "1": { "name": "constant.numeric.hex.shiro" },
            "2": { "name": "storage.type.numeric.suffix.shiro" }
          }
        },
        {
          "match": "\\b([0-9][0-9_]*)(i8|i16|i32|i64|isize|u8|u16|u32|u64|usize)?\\b",
          "captures": {
            "1": { "name": "constant.numeric.integer.shiro" },
            "2": { "name": "storage.type.numeric.suffix.shiro" }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.shiro",
          "match": "->"
        },
        {
          "name": "keyword.operator.comparison.shiro",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.shiro",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.arithmetic.shiro",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.assignment.shiro",
          "match": "(=|\\+=|-=|\\*=|/=|%=)"
        }
      ]
    }
  }
}
